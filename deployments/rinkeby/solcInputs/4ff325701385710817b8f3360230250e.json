{
  "language": "Solidity",
  "sources": {
    "contracts/EasyAuction.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity >=0.6.8;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./libraries/IterableOrderedOrderSet.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./libraries/IdToAddressBiMap.sol\";\nimport \"./libraries/SafeCast.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract EasyAuction is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint64;\n    using SafeMath for uint96;\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n    using IterableOrderedOrderSet for bytes32;\n    using IdToAddressBiMap for IdToAddressBiMap.Data;\n\n    modifier atStageOrderPlacement(uint256 auctionId) {\n        require(\n            block.timestamp < auctionData[auctionId].auctionEndDate,\n            \"no longer in order placement phase\"\n        );\n        _;\n    }\n\n    modifier atStageOrderPlacementAndCancelation(uint256 auctionId) {\n        require(\n            block.timestamp < auctionData[auctionId].auctionEndDate &&\n                block.timestamp <\n                auctionData[auctionId].orderCancellationEndDate,\n            \"no longer in order placement and cancelation phase\"\n        );\n        _;\n    }\n\n    modifier atStageSolutionSubmission(uint256 auctionId) {\n        {\n            uint256 auctionEndDate = auctionData[auctionId].auctionEndDate;\n            require(\n                auctionEndDate != 0 &&\n                    block.timestamp > auctionEndDate &&\n                    auctionData[auctionId].clearingPriceOrder == bytes32(0),\n                \"Auction not in solution submission phase\"\n            );\n        }\n        _;\n    }\n\n    modifier atStageFinished(uint256 auctionId) {\n        require(\n            auctionData[auctionId].clearingPriceOrder != bytes32(0),\n            \"Auction not yet finished\"\n        );\n        _;\n    }\n\n    event NewSellOrder(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    );\n    event CancellationSellOrder(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    );\n    event ClaimedFromOrder(\n        uint256 indexed auctionId,\n        uint64 indexed userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    );\n    event NewUser(uint64 indexed userId, address indexed userAddress);\n    event NewAuction(\n        uint256 indexed auctionId,\n        IERC20 indexed _auctioningToken,\n        IERC20 indexed _biddingToken,\n        uint256 orderCancellationEndDate,\n        uint256 auctionEndDate,\n        uint96 _auctionedSellAmount,\n        uint96 _minBuyAmount,\n        uint256 minimumBiddingAmountPerOrder,\n        uint256 minFundingThreshold\n    );\n    event AuctionCleared(\n        uint256 indexed auctionId,\n        uint96 priceNumerator,\n        uint96 priceDenominator\n    );\n    event UserRegistration(address indexed user, uint64 userId);\n\n    struct AuctionData {\n        IERC20 auctioningToken;\n        IERC20 biddingToken;\n        uint256 orderCancellationEndDate;\n        uint256 auctionEndDate;\n        bytes32 initialAuctionOrder;\n        uint256 minimumBiddingAmountPerOrder;\n        uint256 interimSumBidAmount;\n        bytes32 interimOrder;\n        bytes32 clearingPriceOrder;\n        uint96 volumeClearingPriceOrder;\n        uint256 feeNumerator;\n        uint256 minFundingThreshold;\n        bool minFundingThresholdNotReached;\n    }\n    mapping(uint256 => IterableOrderedOrderSet.Data) internal sellOrders;\n    mapping(uint256 => AuctionData) public auctionData;\n    IdToAddressBiMap.Data private registeredUsers;\n    uint64 public numUsers;\n    uint256 public auctionCounter;\n\n    constructor() public Ownable() {}\n\n    uint256 public feeNumerator = 0;\n    uint256 public constant FEE_DENOMINATOR = 1000;\n    uint64 public feeReceiverUserId = 0;\n\n    function setFeeParameters(\n        uint256 newFeeNumerator,\n        address newfeeReceiverAddress\n    ) public onlyOwner() {\n        require(\n            newFeeNumerator <= 15,\n            \"Fee is not allowed to be set higher than 1.5%\"\n        );\n        // caution: for currently running auctions, the feeReceiverUserId is changing as well.\n        feeReceiverUserId = getUserId(newfeeReceiverAddress);\n        feeNumerator = newFeeNumerator;\n    }\n\n    function initiateAuction(\n        IERC20 _auctioningToken,\n        IERC20 _biddingToken,\n        uint256 orderCancelationPeriodDuration,\n        uint256 duration,\n        uint96 _auctionedSellAmount,\n        uint96 _minBuyAmount,\n        uint256 minimumBiddingAmountPerOrder,\n        uint256 minFundingThreshold\n    ) public returns (uint256) {\n        uint64 userId = getUserId(msg.sender);\n\n        // withdraws sellAmount + fees\n        _auctioningToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            _auctionedSellAmount.mul(FEE_DENOMINATOR.add(feeNumerator)).div(\n                FEE_DENOMINATOR\n            )\n        );\n        require(_auctionedSellAmount > 0, \"cannot auction zero tokens\");\n        require(_minBuyAmount > 0, \"tokens cannot be auctioned for free\");\n        require(\n            minimumBiddingAmountPerOrder > 0,\n            \"minimumBiddingAmountPerOrder is not allowed to be zero\"\n        );\n        auctionCounter++;\n        sellOrders[auctionCounter].initializeEmptyList();\n\n        uint256 orderCancellationEndDate =\n            block.timestamp + orderCancelationPeriodDuration;\n        uint256 auctionEndDate = block.timestamp + duration;\n        auctionData[auctionCounter] = AuctionData(\n            _auctioningToken,\n            _biddingToken,\n            orderCancellationEndDate,\n            auctionEndDate,\n            IterableOrderedOrderSet.encodeOrder(\n                userId,\n                _minBuyAmount,\n                _auctionedSellAmount\n            ),\n            minimumBiddingAmountPerOrder,\n            0,\n            bytes32(0),\n            bytes32(0),\n            0,\n            feeNumerator,\n            minFundingThreshold,\n            false\n        );\n        emit NewAuction(\n            auctionCounter,\n            _auctioningToken,\n            _biddingToken,\n            orderCancellationEndDate,\n            auctionEndDate,\n            _auctionedSellAmount,\n            _minBuyAmount,\n            minimumBiddingAmountPerOrder,\n            minFundingThreshold\n        );\n        return auctionCounter;\n    }\n\n    function placeSellOrders(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders\n    ) public atStageOrderPlacement(auctionId) returns (uint64 userId) {\n        {\n            // Run verifications of all orders\n            (\n                ,\n                uint96 buyAmountOfInitialAuctionOrder,\n                uint96 sellAmountOfInitialAuctionOrder\n            ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n            for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n                require(\n                    _minBuyAmounts[i].mul(buyAmountOfInitialAuctionOrder) <\n                        sellAmountOfInitialAuctionOrder.mul(_sellAmounts[i]),\n                    \"limit price not better than mimimal offer\"\n                );\n                // orders should have a minimum bid size in order to limit the gas\n                // required to compute the final price of the auction.\n                require(\n                    _sellAmounts[i] >\n                        auctionData[auctionId].minimumBiddingAmountPerOrder,\n                    \"order too small\"\n                );\n            }\n        }\n        uint256 sumOfSellAmounts = 0;\n        userId = getUserId(msg.sender);\n        for (uint256 i = 0; i < _minBuyAmounts.length; i++) {\n            bool success =\n                sellOrders[auctionId].insert(\n                    IterableOrderedOrderSet.encodeOrder(\n                        userId,\n                        _minBuyAmounts[i],\n                        _sellAmounts[i]\n                    ),\n                    _prevSellOrders[i]\n                );\n            if (success) {\n                sumOfSellAmounts = sumOfSellAmounts.add(_sellAmounts[i]);\n                emit NewSellOrder(\n                    auctionId,\n                    userId,\n                    _minBuyAmounts[i],\n                    _sellAmounts[i]\n                );\n            }\n        }\n        auctionData[auctionId].biddingToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            sumOfSellAmounts\n        );\n    }\n\n    function cancelSellOrders(uint256 auctionId, bytes32[] memory _sellOrders)\n        public\n        atStageOrderPlacementAndCancelation(auctionId)\n    {\n        uint64 userId = getUserId(msg.sender);\n        uint256 claimableAmount = 0;\n        for (uint256 i = 0; i < _sellOrders.length; i++) {\n            // Note: we keep the back pointer of the deleted element so that\n            // it can be used as a reference point to insert a new node.\n            bool success =\n                sellOrders[auctionId].removeKeepHistory(_sellOrders[i]);\n            if (success) {\n                (\n                    uint64 userIdOfIter,\n                    uint96 buyAmountOfIter,\n                    uint96 sellAmountOfIter\n                ) = _sellOrders[i].decodeOrder();\n                require(\n                    userIdOfIter == userId,\n                    \"Only the user can cancel his orders\"\n                );\n                claimableAmount = claimableAmount.add(sellAmountOfIter);\n                emit CancellationSellOrder(\n                    auctionId,\n                    userId,\n                    buyAmountOfIter,\n                    sellAmountOfIter\n                );\n            }\n        }\n        auctionData[auctionId].biddingToken.safeTransfer(\n            msg.sender,\n            claimableAmount\n        );\n    }\n\n    function precalculateSellAmountSum(\n        uint256 auctionId,\n        uint256 iterationSteps\n    ) public atStageSolutionSubmission(auctionId) {\n        (, , uint96 auctioneerSellAmount) =\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\n        if (iterOrder == bytes32(0)) {\n            iterOrder = IterableOrderedOrderSet.QUEUE_START;\n        }\n\n        for (uint256 i = 0; i < iterationSteps; i++) {\n            iterOrder = sellOrders[auctionId].next(iterOrder);\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n            sumBidAmount = sumBidAmount.add(sellAmountOfIter);\n        }\n\n        require(\n            iterOrder != IterableOrderedOrderSet.QUEUE_END,\n            \"reached end of order list\"\n        );\n\n        // it is checked that not too many iteration steps were taken:\n        // require that the sum of SellAmounts times the price of the last order\n        // is not more than intially sold amount\n        (, uint96 buyAmountOfIter, uint96 sellAmountOfIter) =\n            iterOrder.decodeOrder();\n        require(\n            sumBidAmount.mul(buyAmountOfIter) <\n                auctioneerSellAmount.mul(sellAmountOfIter),\n            \"too many orders summed up\"\n        );\n\n        auctionData[auctionId].interimSumBidAmount = sumBidAmount;\n        auctionData[auctionId].interimOrder = iterOrder;\n    }\n\n    // @dev function verifiying the auction price\n    // @parameter price: This should either be a price encoded as an order\n    // with userId = 0, priceNumerator = buyAmount, priceDenominator = sellAmount\n    // or it should reference to the particular order settled only partially within\n    // this auction.\n    function verifyPrice(uint256 auctionId, bytes32 price)\n        public\n        atStageSolutionSubmission(auctionId)\n    {\n        (, uint96 priceNumerator, uint96 priceDenominator) =\n            price.decodeOrder();\n        (\n            uint64 auctioneerId,\n            uint96 auctioneerBuyAmount,\n            uint96 auctioneerSellAmount\n        ) = auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        require(priceNumerator > 0, \"price must be postive\");\n        uint256 sumBidAmount = auctionData[auctionId].interimSumBidAmount;\n        bytes32 iterOrder = auctionData[auctionId].interimOrder;\n        if (iterOrder == bytes32(0)) {\n            iterOrder = IterableOrderedOrderSet.QUEUE_START;\n        }\n        if (!sellOrders[auctionId].isEmpty()) {\n            iterOrder = sellOrders[auctionId].next(iterOrder);\n            while (iterOrder != price && iterOrder.smallerThan(price)) {\n                (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n                sumBidAmount = sumBidAmount.add(sellAmountOfIter);\n                iterOrder = sellOrders[auctionId].next(iterOrder);\n            }\n        }\n        uint256 sumBuyAmount =\n            sumBidAmount.mul(priceNumerator).div(priceDenominator);\n        if (price == iterOrder) {\n            // case 1: one sellOrder is partially filled\n            // The partially filled order is the iterOrder, if:\n            // 1) The sumBuyAmounts is not bigger than the intitial order's sell amount\n            // i.e, sellAmount >= sumBuyAmount\n            // 2) The volume of the particial order is not bigger than its sell volume\n            // i.e. auctionData[auctionId].volumeClearingPriceOrder <= sellAmountOfIter,\n            (, , uint96 sellAmountOfIter) = iterOrder.decodeOrder();\n            uint256 clearingOrderBuyAmount =\n                auctioneerSellAmount.sub(sumBuyAmount);\n            // Attention: This conversion can prevent closing auctions, if rounding down\n            // to uint96 does fail. Should not happen, unless token has more than 18 digits\n            // or prices are huge.\n            auctionData[auctionId].volumeClearingPriceOrder = (\n                clearingOrderBuyAmount.mul(priceDenominator).div(priceNumerator)\n            )\n                .toUint96();\n            sumBuyAmount = sumBuyAmount.add(\n                auctionData[auctionId].volumeClearingPriceOrder\n            );\n            require(\n                auctionData[auctionId].volumeClearingPriceOrder <=\n                    sellAmountOfIter,\n                \"order can not be clearing order\"\n            );\n            auctionData[auctionId].clearingPriceOrder = iterOrder;\n        } else {\n            if (sumBuyAmount < auctioneerSellAmount) {\n                // case 2: initialAuction order is partially filled\n                // We require that the price was the initialOrderLimit price's inverse\n                // as this ensures that the for-loop iterated through all orders\n                // and all orders are considered\n                require(\n                    priceNumerator.mul(auctioneerBuyAmount) ==\n                        auctioneerSellAmount.mul(priceDenominator),\n                    \"supplied price must be inverse initialOrderLimit\"\n                );\n                auctionData[auctionId].volumeClearingPriceOrder = sumBuyAmount\n                    .toUint96();\n                auctionData[auctionId]\n                    .clearingPriceOrder = IterableOrderedOrderSet.encodeOrder(\n                    auctioneerId,\n                    priceNumerator,\n                    priceDenominator\n                );\n            } else {\n                // case 3: no order is partially filled\n                // In this case the sumBuyAmount must be equal to\n                // the sellAmount of the initialAuctionOrder, without\n                // any rounding errors.\n                // This price is always existing as we can choose\n                // priceNumerator = sellAmount and priceDenominator = sumSellAmount\n                auctionData[auctionId].clearingPriceOrder = price;\n                require(\n                    sumBuyAmount == auctioneerSellAmount,\n                    \"price is not clearing price\"\n                );\n                require(\n                    priceNumerator.mul(auctioneerBuyAmount) <=\n                        auctioneerSellAmount.mul(priceDenominator),\n                    \"clearing price is better than initialAuctionOrder\"\n                );\n            }\n        }\n        if (auctionData[auctionId].minFundingThreshold > sumBuyAmount) {\n            auctionData[auctionId].minFundingThresholdNotReached = true;\n        } else {\n            if (auctionData[auctionId].feeNumerator > 0) {\n                claimFees(auctionId);\n            }\n        }\n        claimAuctioneerFunds(auctionId);\n        emit AuctionCleared(auctionId, priceNumerator, priceDenominator);\n    }\n\n    function claimFromParticipantOrder(\n        uint256 auctionId,\n        bytes32[] memory orders\n    )\n        public\n        atStageFinished(auctionId)\n        returns (\n            uint256 sumAuctioningTokenAmount,\n            uint256 sumBiddingTokenAmount\n        )\n    {\n        for (uint256 i = 0; i < orders.length; i++) {\n            // Note: we don't need to keep any information about the node since\n            // no new elements need to be inserted.\n            require(\n                sellOrders[auctionId].remove(orders[i]),\n                \"order is no longer claimable\"\n            );\n        }\n        AuctionData memory auction = auctionData[auctionId];\n        (, uint96 priceNumerator, uint96 priceDenominator) =\n            auction.clearingPriceOrder.decodeOrder();\n        (uint64 userId, , ) = orders[0].decodeOrder();\n        bool minFundingThresholdNotReached =\n            auctionData[auctionId].minFundingThresholdNotReached;\n        for (uint256 i = 0; i < orders.length; i++) {\n            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) =\n                orders[i].decodeOrder();\n            require(\n                userIdOrder == userId,\n                \"only allowed to claim for same user\"\n            );\n            if (minFundingThresholdNotReached) {\n                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);\n            } else {\n                if (orders[i] == auction.clearingPriceOrder) {\n                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                        auction\n                            .volumeClearingPriceOrder\n                            .mul(priceNumerator)\n                            .div(priceDenominator)\n                    );\n                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                        sellAmount.sub(auction.volumeClearingPriceOrder)\n                    );\n                } else {\n                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {\n                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(\n                            sellAmount.mul(priceNumerator).div(priceDenominator)\n                        );\n                    } else {\n                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(\n                            sellAmount\n                        );\n                    }\n                }\n            }\n            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);\n        }\n        sendOutTokens(\n            auctionId,\n            sumAuctioningTokenAmount,\n            sumBiddingTokenAmount,\n            userId\n        );\n    }\n\n    function claimAuctioneerFunds(uint256 auctionId)\n        internal\n        returns (uint256 auctioningTokenAmount, uint256 biddingTokenAmount)\n    {\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        if (auctionData[auctionId].minFundingThresholdNotReached) {\n            sendOutTokens(auctionId, sellAmount, 0, auctioneerId);\n        } else {\n            auctionData[auctionId].initialAuctionOrder = bytes32(0);\n            (, uint96 priceNumerator, uint96 priceDenominator) =\n                auctionData[auctionId].clearingPriceOrder.decodeOrder();\n            if (\n                priceNumerator.mul(buyAmount) ==\n                priceDenominator.mul(sellAmount)\n            ) {\n                // In this case we have a partial match of the initialSellOrder\n                auctioningTokenAmount = sellAmount.sub(\n                    auctionData[auctionId].volumeClearingPriceOrder\n                );\n                biddingTokenAmount = auctionData[auctionId]\n                    .volumeClearingPriceOrder\n                    .mul(priceDenominator)\n                    .div(priceNumerator);\n            } else {\n                biddingTokenAmount = sellAmount.mul(priceDenominator).div(\n                    priceNumerator\n                );\n            }\n            sendOutTokens(\n                auctionId,\n                auctioningTokenAmount,\n                biddingTokenAmount,\n                auctioneerId\n            );\n        }\n    }\n\n    function claimFees(uint256 auctionId) internal {\n        (uint64 auctioneerId, uint96 buyAmount, uint96 sellAmount) =\n            auctionData[auctionId].initialAuctionOrder.decodeOrder();\n        (, uint96 priceNumerator, uint96 priceDenominator) =\n            auctionData[auctionId].clearingPriceOrder.decodeOrder();\n        uint256 feeAmount =\n            sellAmount.mul(auctionData[auctionId].feeNumerator).div(\n                FEE_DENOMINATOR\n            );\n        if (priceNumerator.mul(buyAmount) == priceDenominator.mul(sellAmount)) {\n            // In this case we have a partial match of the initialSellOrder\n            uint256 auctioningTokenAmount =\n                sellAmount.sub(auctionData[auctionId].volumeClearingPriceOrder);\n            sendOutTokens(\n                auctionId,\n                feeAmount.mul(auctioningTokenAmount).div(sellAmount),\n                0,\n                feeReceiverUserId\n            );\n            sendOutTokens(\n                auctionId,\n                feeAmount.mul(sellAmount.sub(auctioningTokenAmount)).div(\n                    sellAmount\n                ),\n                0,\n                auctioneerId\n            );\n        } else {\n            sendOutTokens(auctionId, feeAmount, 0, feeReceiverUserId);\n        }\n    }\n\n    function sendOutTokens(\n        uint256 auctionId,\n        uint256 auctioningTokenAmount,\n        uint256 biddingTokenAmount,\n        uint64 userId\n    ) internal {\n        address userAddress = registeredUsers.getAddressAt(userId);\n        if (auctioningTokenAmount > 0) {\n            auctionData[auctionId].auctioningToken.safeTransfer(\n                userAddress,\n                auctioningTokenAmount\n            );\n        }\n        if (biddingTokenAmount > 0) {\n            auctionData[auctionId].biddingToken.safeTransfer(\n                userAddress,\n                biddingTokenAmount\n            );\n        }\n    }\n\n    function registerUser(address user) public returns (uint64 userId) {\n        require(\n            registeredUsers.insert(numUsers, user),\n            \"User already registered\"\n        );\n        userId = numUsers;\n        numUsers = numUsers.add(1).toUint64();\n        emit UserRegistration(user, userId);\n    }\n\n    function getUserId(address user) public returns (uint64 userId) {\n        if (registeredUsers.hasAddress(user)) {\n            userId = registeredUsers.getId(user);\n        } else {\n            userId = registerUser(user);\n            emit NewUser(userId, user);\n        }\n    }\n\n    function getSecondsRemainingInBatch(uint256 auctionId)\n        public\n        view\n        returns (uint256)\n    {\n        if (auctionData[auctionId].auctionEndDate < block.timestamp) {\n            return 0;\n        }\n        return auctionData[auctionId].auctionEndDate.sub(block.timestamp);\n    }\n\n    function containsOrder(uint256 auctionId, bytes32 order)\n        public\n        view\n        returns (bool)\n    {\n        return sellOrders[auctionId].contains(order);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/libraries/IterableOrderedOrderSet.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity >=0.6.8;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary IterableOrderedOrderSet {\n    using SafeMath for uint96;\n    using IterableOrderedOrderSet for bytes32;\n\n    // represents smallest possible value for an order under comparison of fn smallerThan()\n    bytes32 internal constant QUEUE_START =\n        0x0000000000000000000000000000000000000000000000000000000000000001;\n    // represents highest possible value for an order under comparison of fn smallerThan()\n    bytes32 internal constant QUEUE_END =\n        0xffffffffffffffffffffffffffffffffffffffff000000000000000000000001;\n\n    /// The struct is used to implement a modified version of a doubly linked\n    /// list with sorted elements. The list starts from QUEUE_START to\n    /// QUEUE_END, and each node keeps track of its predecessor and successor.\n    /// Nodes can be added or removed.\n    ///\n    /// `next` and `prev` have a different role. The list is supposed to be\n    /// traversed with `next`. If `next` is empty, the node is not part of the\n    /// list. However, `prev` might be set for elements that are not in the\n    /// list, which is why it should not be used for traversing. Having a `prev`\n    /// set for elements not in the list is used to keep track of the history of\n    /// the position in the list of a removed element.\n    struct Data {\n        mapping(bytes32 => bytes32) nextMap;\n        mapping(bytes32 => bytes32) prevMap;\n    }\n\n    struct Order {\n        uint64 owner;\n        uint96 buyAmount;\n        uint96 sellAmount;\n    }\n\n    function initializeEmptyList(Data storage self) internal {\n        self.nextMap[QUEUE_START] = QUEUE_END;\n        self.prevMap[QUEUE_END] = QUEUE_START;\n    }\n\n    function isEmpty(Data storage self) internal view returns (bool) {\n        return self.nextMap[QUEUE_START] == QUEUE_END;\n    }\n\n    function insert(\n        Data storage self,\n        bytes32 elementToInsert,\n        bytes32 elementBeforeNewOne\n    ) internal returns (bool) {\n        (, , uint96 denominator) = decodeOrder(elementToInsert);\n        require(denominator != uint96(0), \"Inserting zero is not supported\");\n        require(\n            elementToInsert != QUEUE_START && elementToInsert != QUEUE_END,\n            \"Inserting element is not valid\"\n        );\n        if (contains(self, elementToInsert)) {\n            return false;\n        }\n        if (\n            elementBeforeNewOne != QUEUE_START &&\n            self.prevMap[elementBeforeNewOne] == bytes32(0)\n        ) {\n            return false;\n        }\n        if (!elementBeforeNewOne.smallerThan(elementToInsert)) {\n            return false;\n        }\n\n        // `elementBeforeNewOne` might have been removed during the time it\n        // took to the transaction calling this function to be mined, so\n        // the new order cannot be appended directly to this. We follow the\n        // history of previous links backwards until we find an element in\n        // the list from which to start our search.\n        // Note that following the link backwards returns elements that are\n        // before `elementBeforeNewOne` in sorted order.\n        while (self.nextMap[elementBeforeNewOne] == bytes32(0)) {\n            elementBeforeNewOne = self.prevMap[elementBeforeNewOne];\n        }\n\n        // `elementBeforeNewOne` belongs now to the linked list. We search the\n        // largest entry that is smaller than the element to insert.\n        bytes32 previous;\n        bytes32 current = elementBeforeNewOne;\n        do {\n            previous = current;\n            current = self.nextMap[current];\n        } while (current.smallerThan(elementToInsert));\n        // Note: previous < elementToInsert < current\n        self.nextMap[previous] = elementToInsert;\n        self.prevMap[current] = elementToInsert;\n        self.prevMap[elementToInsert] = previous;\n        self.nextMap[elementToInsert] = current;\n\n        return true;\n    }\n\n    /// The element is removed from the linked list, but the node retains\n    /// information on which predecessor it had, so that a node in the chain\n    /// can be reached by following the predecessor chain of deleted elements.\n    function removeKeepHistory(Data storage self, bytes32 elementToRemove)\n        internal\n        returns (bool)\n    {\n        if (!contains(self, elementToRemove)) {\n            return false;\n        }\n        bytes32 previousElement = self.prevMap[elementToRemove];\n        bytes32 nextElement = self.nextMap[elementToRemove];\n        self.nextMap[previousElement] = nextElement;\n        self.prevMap[nextElement] = previousElement;\n        self.nextMap[elementToRemove] = bytes32(0);\n        return true;\n    }\n\n    /// Remove an element from the chain, clearing all related storage.\n    /// Note that no elements should be inserted using as a reference point a\n    /// node deleted after calling `remove`, since an element in the `prev`\n    /// chain might be missing.\n    function remove(Data storage self, bytes32 elementToRemove)\n        internal\n        returns (bool)\n    {\n        bool result = removeKeepHistory(self, elementToRemove);\n        if (result) {\n            self.prevMap[elementToRemove] = bytes32(0);\n        }\n        return result;\n    }\n\n    function contains(Data storage self, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        if (value == QUEUE_START) {\n            return false;\n        }\n        // Note: QUEUE_END is not contained in the list since it has no\n        // successor.\n        return self.nextMap[value] != bytes32(0);\n    }\n\n    // @dev orders are ordered by\n    // 1. their price - buyAmount/sellAmount and\n    // 2. their userId,\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\n        internal\n        pure\n        returns (bool)\n    {\n        (\n            uint64 userIdLeft,\n            uint96 priceNumeratorLeft,\n            uint96 priceDenominatorLeft\n        ) = decodeOrder(orderLeft);\n        (\n            uint64 userIdRight,\n            uint96 priceNumeratorRight,\n            uint96 priceDenominatorRight\n        ) = decodeOrder(orderRight);\n\n        if (\n            priceNumeratorLeft.mul(priceDenominatorRight) <\n            priceNumeratorRight.mul(priceDenominatorLeft)\n        ) return true;\n        if (\n            priceNumeratorLeft.mul(priceDenominatorRight) >\n            priceNumeratorRight.mul(priceDenominatorLeft)\n        ) return false;\n\n        require(\n            userIdLeft != userIdRight,\n            \"user is not allowed to place same order twice\"\n        );\n        if (userIdLeft < userIdRight) {\n            return true;\n        }\n        return false;\n    }\n\n    function first(Data storage self) internal view returns (bytes32) {\n        require(!isEmpty(self), \"Trying to get first from empty set\");\n        return self.nextMap[QUEUE_START];\n    }\n\n    function next(Data storage self, bytes32 value)\n        internal\n        view\n        returns (bytes32)\n    {\n        require(value != QUEUE_END, \"Trying to get next of last element\");\n        bytes32 nextElement = self.nextMap[value];\n        require(\n            nextElement != bytes32(0),\n            \"Trying to get next of non-existent element\"\n        );\n        return nextElement;\n    }\n\n    function decodeOrder(bytes32 _orderData)\n        internal\n        pure\n        returns (\n            uint64 userId,\n            uint96 buyAmount,\n            uint96 sellAmount\n        )\n    {\n        // Note: converting to uint discards the binary digits that do not fit\n        // the type.\n        userId = uint64(uint256(_orderData) >> 192);\n        buyAmount = uint96(uint256(_orderData) >> 96);\n        sellAmount = uint96(uint256(_orderData));\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    ) internal pure returns (bytes32) {\n        return\n            bytes32(\n                (uint256(userId) << 192) +\n                    (uint256(buyAmount) << 96) +\n                    uint256(sellAmount)\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/libraries/IdToAddressBiMap.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity ^0.6.0;\n\nlibrary IdToAddressBiMap {\n    struct Data {\n        mapping(uint64 => address) idToAddress;\n        mapping(address => uint64) addressToId;\n    }\n\n    function hasId(Data storage self, uint64 id) internal view returns (bool) {\n        return self.idToAddress[id + 1] != address(0);\n    }\n\n    function hasAddress(Data storage self, address addr)\n        internal\n        view\n        returns (bool)\n    {\n        return self.addressToId[addr] != 0;\n    }\n\n    function getAddressAt(Data storage self, uint64 id)\n        internal\n        view\n        returns (address)\n    {\n        require(hasId(self, id), \"Must have ID to get Address\");\n        return self.idToAddress[id + 1];\n    }\n\n    function getId(Data storage self, address addr)\n        internal\n        view\n        returns (uint64)\n    {\n        require(hasAddress(self, addr), \"Must have Address to get ID\");\n        return self.addressToId[addr] - 1;\n    }\n\n    function insert(\n        Data storage self,\n        uint64 id,\n        address addr\n    ) internal returns (bool) {\n        require(addr != address(0), \"Cannot insert zero address\");\n        require(id != uint64(-1), \"Cannot insert max uint64\");\n        // Ensure bijectivity of the mappings\n        if (\n            self.addressToId[addr] != 0 ||\n            self.idToAddress[id + 1] != address(0)\n        ) {\n            return false;\n        }\n        self.idToAddress[id + 1] = addr;\n        self.addressToId[addr] = id + 1;\n        return true;\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Logic was copied and modified from here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\n */\nlibrary SafeCast {\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value < 2**96, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/IterableOrderedOrderSetWrapper.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity ^0.6.0;\nimport \"../libraries/IterableOrderedOrderSet.sol\";\n\ncontract IterableOrderedOrderSetWrapper {\n    using IterableOrderedOrderSet for IterableOrderedOrderSet.Data;\n\n    IterableOrderedOrderSet.Data internal data;\n\n    function initializeEmptyList() public {\n        data.initializeEmptyList();\n    }\n\n    function insert(bytes32 value) public returns (bool) {\n        return data.insert(value, IterableOrderedOrderSet.QUEUE_START);\n    }\n\n    function insertAt(bytes32 value, bytes32 at) public returns (bool) {\n        return data.insert(value, at);\n    }\n\n    function remove(bytes32 value) public returns (bool) {\n        return data.remove(value);\n    }\n\n    function removeKeepHistory(bytes32 value) public returns (bool) {\n        return data.removeKeepHistory(value);\n    }\n\n    function contains(bytes32 value) public view returns (bool) {\n        return data.contains(value);\n    }\n\n    function isEmpty() public view returns (bool) {\n        return data.isEmpty();\n    }\n\n    function first() public view returns (bytes32) {\n        return data.first();\n    }\n\n    function next(bytes32 value) public view returns (bytes32) {\n        return data.next(value);\n    }\n\n    function nextMap(bytes32 value) public view returns (bytes32) {\n        return data.nextMap[value];\n    }\n\n    function prevMap(bytes32 value) public view returns (bytes32) {\n        return data.prevMap[value];\n    }\n\n    function decodeOrder(bytes32 value)\n        public\n        pure\n        returns (\n            uint64,\n            uint96,\n            uint96\n        )\n    {\n        return IterableOrderedOrderSet.decodeOrder(value);\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 sellAmount,\n        uint96 buyAmount\n    ) public pure returns (bytes32) {\n        return\n            IterableOrderedOrderSet.encodeOrder(userId, sellAmount, buyAmount);\n    }\n\n    function smallerThan(bytes32 orderLeft, bytes32 orderRight)\n        public\n        pure\n        returns (bool)\n    {\n        return IterableOrderedOrderSet.smallerThan(orderLeft, orderRight);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}